input {
#   beats {
#     port => 5044
#     ssl => false
#     client_inactivity_timeout => 36000
#   }
  file
  {
      path => ["/etc/logstash/apim-metric.log"]
      start_position => "beginning"
  }

}

filter {
  grok {
    match => ["message", "%{GREEDYDATA:UNWANTED}\ apimMetrics:%{GREEDYDATA:apimMetrics}\, %{GREEDYDATA:UNWANTED} \:%{GREEDYDATA:properties}"] #WSO2 Config
#     match => { "message" => "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}*\[%{LOGLEVEL:logLevel} \]%{SPACE}*%{GREEDYDATA:msg}" }
#     match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}*%{LOGLEVEL:logLevel}%{SPACE}*- %{GREEDYDATA:msg}" }
#     match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}*%{LOGLEVEL:logLevel}%{SPACE}*- %{GREEDYDATA:msg}" }
#     match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}*\[%{DATA:threadName}\]%{SPACE}*%{LOGLEVEL:logLevel}%{SPACE}*\[%{DATA:applicationName},%{DATA:traceId},%{DATA:spanId},%{DATA:correlationId}\]%{SPACE}*%{DATA:className}%{SPACE}*(\[%{DATA:ddTracId},%{DATA:ddSpanId}\])?%{SPACE}*-%{SPACE}*(?m)%{GREEDYDATA:msg}" }    match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}*\[%{DATA:threadName}\]%{SPACE}*%{LOGLEVEL:logLevel}%{SPACE}*\[%{DATA:applicationName},%{DATA:traceId},%{DATA:spanId},%{DATA:correlationId}\]%{SPACE}*%{DATA:className}%{SPACE}*-%{SPACE}*%{DATA:exception}%{SPACE}*-%{SPACE}*%{GREEDYDATA:msg}" }    match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}*%{LOGLEVEL:logLevel}%{SPACE}*\[%{DATA:applicationName},%{DATA:traceId},%{DATA:spanId},%{DATA:correlationId}\]%{SPACE}*%{DATA:className}%{SPACE}*-%{SPACE}*%{GREEDYDATA:msg}" }
#     match => { "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]%{SPACE}*%{LOGLEVEL:logLevel}%{SPACE}*%{GREEDYDATA:msg}"}
#     add_field => ["environment" , "%{[kubernetes][namespace]}"]
#     add_field => ["pod_ip" , "%{[kubernetes][pod][ip]}"]
#     #add_field => ["pod_sts_name" , "%{[kubernetes][statefulset][name]}"]
#     add_field => ["deployment", "msa"]
#     add_field => ["logstash", "1"]
#     remove_field => ["log"]
  }

#   mutate {    remove_field => ["agent","ecs","host","input","orchestrator","container","stream","tags","pod_ip","[kubernetes][deployment]","[kubernetes][container]","[kubernetes][labels][app]","[kubernetes][container][name]","[kubernetes][node][uid]","[kubernetes][pod]","[kubernetes][node]","[kubernetes][kubernete][replicaset][name]"]
#     rename => { "msg" => "message" }
#     add_field => { "pod_ip" => "%{[kubernetes][pod][ip]}" }
#     add_field => { "logstash" => "1" }
#   }

  json {
     source => "properties"
  }
}

output {
    elasticsearch {
        hosts => ["https://192.168.122.53:9200"]
        user => "elastic"
        password => "-FlGsxbpJM_iA*NZftkW"
        cacert => "/etc/logstash/conf.d/certs/ca/ca.crt"
        index => "%{[kubernetes][labels][elk_index_prefix]}.%{[kubernetes][namespace]}-%{+YYYY.MM.dd}"
    }

    if [apimMetrics] == " apim:response" {
        elasticsearch {
            hosts => ["https://192.168.122.53:9200"]
            user => "elastic"
            password => "-FlGsxbpJM_iA*NZftkW"
            cacert => "/etc/logstash/conf.d/certs/ca/ca.crt"
            index => "apim_event_response"

        }

    } else if [apimMetrics] == " apim:faulty" {
        elasticsearch {
            hosts => ["https://192.168.122.53:9200"]
            user => "elastic"
            password => "-FlGsxbpJM_iA*NZftkW"
            cacert => "/etc/logstash/conf.d/certs/ca/ca.crt"
            index => "apim_event_faulty"
        }
    }
}
