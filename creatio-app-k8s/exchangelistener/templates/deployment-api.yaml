{{- $authEnabled := eq (include "auth.parametersSet" .) "true" -}}
{{- $securityEnabled := eq (include "security.parametersSet" .) "true" -}}
apiVersion: {{ .Values.apiVersion }}
kind: Deployment
metadata:
  name: {{ .Release.Name }}-api
spec:
  selector:
    matchLabels:
      app: {{ include "base-service.name" . }}-api
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
{{ include "labels" (dict "root" . "prefix" "api") | indent 8 }}
      annotations:
        prometheus.io/scrape: "true"
    spec:
      volumes:
        - name: log4net-exchange-listeners
          configMap:
            name: {{ .Release.Name }}-log4net
            items:
              - key: log4net.config
                path: log4net.config
        - name: appsettings-exchange-listeners
          configMap:
            name: {{ .Release.Name }}-appsettings
            items:
              - key: appSettings
                path: appsettings.json
        - name: rabbitmq-exchange-listeners
          secret:
            secretName: {{ include "rabbitmq.secretName" . }}
            items:
              - key: appSettings
                path: rabbitmq.secrets.json
{{- if $securityEnabled }}
        - name: certificate-exchange-listeners
          secret:
            secretName: {{ include "security.certificateSecretName" . }}
            items:
              - key: pfx-cert
                path: el.pfx
{{- end }}
{{- if $authEnabled }}
        - name: auth-exchange-listeners
          secret:
            secretName: {{ include "auth.secretName" . }}
            items:
              - key: appSettings
                path: auth.secrets.json
{{- end }}
{{- if .Values.api.extraVolumeMounts }}
        {{ toYaml .Values.api.extraVolumeMounts | nindent 8 }}
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
            initialDelaySeconds: 20
            periodSeconds: 30
            timeoutSeconds: 60
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 1
          resources:
            limits:
              memory: {{ .Values.resources.statefullset.limits.memory }}
              cpu: {{ .Values.resources.statefullset.limits.cpu }}
            requests:
              memory: 512Mi
              cpu: 100m
          volumeMounts:
            - name: log4net-exchange-listeners
              mountPath: {{ include "log4net.mountPath" . }}
              subPath: log4net.config
            - name: appsettings-exchange-listeners
              mountPath: /app/config/appsettings.json
              subPath: appsettings.json
            - name: rabbitmq-exchange-listeners
              mountPath: /app/config/rabbitmq.secrets.json
              subPath: rabbitmq.secrets.json
{{- if $authEnabled }}
            - name: auth-exchange-listeners
              mountPath: /app/config/auth.secrets.json
              subPath: auth.secrets.json
{{- end }}
{{- if $securityEnabled }}
            - name: certificate-exchange-listeners
              mountPath: /app/el.pfx
              subPath: el.pfx
{{- end }}
{{- if .Values.api.extraConfigMapMounts }}
            {{ toYaml .Values.api.extraConfigMapMounts | nindent 12 }}
{{- end }}
          env:
{{- if $securityEnabled }}
            - name: EncryptionCertificatePassword
              valueFrom:
                secretKeyRef:
                  name: {{ include "security.secretName" . }}
                  key: EncryptionCertificatePassword
{{- end }}
            - name: PodName
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ExchangeListenerRedisHost
              value: "{{ .Values.env.host }}:{{ .Values.env.port }}"
            - name: ExchangeListenerRedisDatabase
              value: "{{ .Values.env.base }}"
            - name: Log4NetPath
              value: {{ include "log4net.mountPath" . }}
{{- range $key, $val := .Values.env }}
{{- if (and (ne $key "base") (ne $key "host") (ne $key "port")) }}
            - name: {{ $key }}
              value: {{ $val | quote }}
{{- end }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
