apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-worker-queried-single-task
  labels:
    app: {{ .Release.Name }}-worker-queried-single-task
    chart: {{ template "gs.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.workerQueriedSingleTask.replicaCount }}
{{- with .Values.workerQueriedSingleTask.strategy }}
  strategy:
{{ toYaml . | indent 4  }}
{{ end }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-worker-queried-single-task
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        timestamp: {{ now | quote }}
      labels:
        app: {{ .Release.Name }}-worker-queried-single-task
        release: {{ .Release.Name }}
    spec:
      volumes:
        - name: log4net-file
          configMap:
            name: {{ .Release.Name }}-logging-configmap
            items:
              - key: log4net.config
                path: log4net.config
{{ if .Values.workerQueriedSingleTask.nodeName }}
      nodeName: {{ .Values.workerQueriedSingleTask.nodeName }}
{{- end }}
{{ if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{ toYaml .Values.image.pullSecrets | indent 8 }}
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.workerQueriedSingleTask.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: log4net-file
              mountPath: {{ .Values.log4Net.mountPath }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP

          env:
            - name: DbDialectProvider
              value: {{ .Values.global.db.provider }}
            - name: RabbitConfiguration__QueuePriorityEnable
              value: '{{ .Values.global.rabbitmq.queuePriorityEnable }}'
            - name: RabbitConfiguration__RabbitMQUri
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-gs-secrets
                  key: rabbitmqConnectionString
            - name: IndexEntityPublisherConfiguration__QueueName
              value: {{ .Values.global.rabbitmq.qname.singleTaskInbox }}
            - name: IndexEntityPublisherConfiguration__QueuePriorityEnable
              value: '{{ .Values.global.rabbitmq.queuePriorityEnable }}'
            - name: RabbitConsumerConfiguration__QueueName
              value: {{ .Values.global.rabbitmq.qname.singleQueriedTaskInbox }}
            - name: Log4NetPath
              value: {{ .Values.log4Net.mountPath }}/log4net.config
            - name: ElasticScrollConfiguration__ScrollBatchSize
              value: "{{ .Values.workerQueriedSingleTask.elasticsearch.scrollBatchSize | int64 }}"
            - name: ElasticScrollConfiguration__ScrollTimeout
              value: "{{ .Values.workerQueriedSingleTask.elasticsearch.scrollTimeout | int64 }}"
            - name: OnSiteClientSettings__ElasticSearchUrl
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-global-config-map
                  key: es.url
            - name: elasticLogin
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-gs-secrets
                  key: elasticsearchUser
            - name: elasticPassword
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-gs-secrets
                  key: elasticsearchPassword
{{ if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /liveness
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
{{- end }}
{{ if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /readiness
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
{{- end }}
          resources:
{{ toYaml .Values.workerSingleTask.resources | indent 12 }}
    {{- with .Values.workerSingleTask.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.workerSingleTask.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.workerSingleTask.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
